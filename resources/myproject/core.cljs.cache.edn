;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name myproject.core, :imports nil, :requires {reagent.core reagent.core, reagent reagent.core}, :uses {atom reagent.core}, :defs {on-js-reload {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 20, :column 7, :line 20, :file "/private/tmp/myproject/src/myproject/core.cljs"}, :name myproject.core/on-js-reload, :variadic false, :file "src/myproject/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, hello-world {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 13, :column 7, :line 13, :file "/private/tmp/myproject/src/myproject/core.cljs"}, :name myproject.core/hello-world, :variadic false, :file "src/myproject/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, app-state {:meta {:end-column 19, :end-line 11, :column 10, :line 11, :file "/private/tmp/myproject/src/myproject/core.cljs"}, :file "src/myproject/core.cljs", :line 11, :column 1, :end-line 11, :end-column 19, :test true, :name myproject.core/app-state}}, :require-macros nil, :cljs.analyzer/constants {:order [:text :h1], :seen #{:h1 :text}}, :doc nil}